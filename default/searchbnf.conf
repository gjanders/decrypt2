# [searchbnf.conf](http://docs.splunk.com/Documentation/Splunk/latest/Admin/Searchbnfconf)
#Based on the Splunk SDK for python example http://dev.splunk.com/view/python-sdk/SP-CAAAEU2 countmatches.py, searchcommands_app
[decrypt-command]
syntax = decrypt (<decrypt-options>)*
alias =
shortdesc = decrypt is implemented as a single search command which exposes a number of data manipulation functions. It takes the required field to manipulate and then one or more functions as arguments
description = \
    decrypt is implemented as a single search command which exposes a number of data manipulation functions. It takes the required field to manipulate and then one or more functions as arguments. \
    Usage: decrypt [field=<name>] FUNCTIONS... \
    \
    The following example will transform the sourcetype field into its hex representation: \
    ... | decrypt field=sourcetype hex() emit('sourcetype') \
    Note: Fields must be output via the emit function. The input field is not modified in place. \
    If the emit function is not mentioned, an emit('decrypted') is automatically added so the data is output
comment1 = XOR example take the secret and return a field called result
example1 = ... | decrypt field=data xor('secret') emit('result')
comment2 = ROT13 cipher example
example2 = ... | decrypt field=data rotx(13) emit('result')
comment3 = base64 and then xor the secret field and return a field called result
example3 = ... | decrypt field=data b64 xor('secret') emit('result')
comment4 = base64, and XOR the first byte
example4 = ... | decrypt field=data \
      b64 \
      save('bin') \
      substr(0, 1) emit('key') \
      load('bin') \
      substr(1, 9999) xor(key) emit('result')
comment5 = brute force RC4
example5 = ... | decrypt field=data \
      b64 \
      save('orig') rc4('secret') emit('rc4-secret') \
      load('orig') rc4('password') emit('rc4-password') \
      load('orig') rc4('abc123') emit('rc4-abc123') \
      load('orig') rc4('aabbccdd') emit('rc4-aabbccdd')
comment6 =  brute force XOR key
example6 = ... | decrypt field=data \
      b64 \
      save('data') xor(0x01) emit('xor0x01') \
      load('data') xor(0x02) emit('xor0x02') \
      load('data') xor(0x03) emit('xor0x03')
#appears-in = 1.2
usage = public
#tags = searchcommands_app
#
[decrypt-options]
syntax = field=<string> atob | b64 | btoa | b32 | b58 | hex | unhex | rol(<int>) | ror(<int>) | rotx('<string>') | xor('<string>') | rc4('<string>') | emit('<string>') | load('<string>') | save('<string>') | substr(<int>, <int>)  | ascii | decode('<string>') | escape | unescape | tr('<string>', '<string>') | rev | find('<string>', <int>) | b32re | b64re
description = Pass the field name to work with, then the command or command(s) to be used, an emit() option can be passed to choose the field to return, defaults to the field name "decrypted" 
